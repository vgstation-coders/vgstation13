<!--
Title: instrument view
Used In File(s): /code/game/objects/structures/musician.dm
 -->
<span id="controls">
    <H3>Playback</H3>
    {{:helper.link('Play', '', { 'play' : 1 })}}
    {{:helper.link('Stop', '', { 'stop' : 1 })}}
    <BR><BR>
    Repeat Song:
    {{:helper.link('--', '', { 'repeat' : -10 })}}
    {{:helper.link('-', '', { 'repeat' : -1 })}}
    {{:data.repeat}} times
    {{:helper.link('+', '', { 'repeat' : 1 })}}
    {{:helper.link('++', '', { 'repeat' : 10 })}}
    <BR>
</span>
<H3>Editing</H3>
{{:helper.link('New Song', '', { 'newsong' : 1 })}}
{{:helper.link('Import Song', '', { 'import' : 1 })}}
<BR><BR>
Tempo: {{:helper.link('-', '', { 'tempo' : data.ticklag })}} {{:data.bpm}} BPM {{:helper.link('+', '', { 'tempo' : -data.ticklag })}}
<BR><BR>
<span id="lines">
{{:data.lines}}
</span>
{{:helper.link('Add Line', '', { 'newline' : 1 })}}
<BR><BR>
<B><button id="help_btn" onclick="helpVisibility(this.value)" value=0 >Hide Help</button></B>
<span id="help">
<BR>
Lines are a series of chords, separated by commas (,), each with notes seperated by hyphens (-).<br>
Every note in a chord will play together, with chord timed by the tempo.<br>
<br>
Notes are played by the names of the note, and optionally, the accidental, and/or the octave number.<br>
By default, every note is natural and in octave 3. Defining otherwise is remembered for each note.<br>
Example: <i>C,D,E,F,G,A,B</i> will play a C major scale.<br>
After a note has an accidental placed, it will be remembered: <i>C,C4,C,C3</i> is C3,C4,C4,C3</i><br>
Chords can be played simply by seperating each note with a hyphon: <i>A-C#,Cn-E,E-G#,Gn-B</i><br>
A pause may be denoted by an empty chord: <i>C,E,,C,G</i><br>
To make a chord be a different time, end it with /x, where the chord length will be length<br>
defined by tempo / x: <i>C,G/2,E/4</i><br>
Combined, an example is: <i>E-E4/4,F#/2,G#/8,B/8,E3-E4/4</i>
<br>
Lines may be up to 50 characters.<br>
A song may only contain up to 50 lines.<br>
</span>
<script>
var prevChord = "";
var highlightClass = "activeChord";

function controlVisibility(num){
    if(num == 1){
        $("#controls").show();
    }else{
        $("#controls").hide();
    }
}

function renderLines(lines){
    var result = "";
    for (i = 0; i < lines.length; i++) { 
        var curLine = lines[i].split(",");
        var htmlLine = [];
        for(j = 0; j < curLine.length; j++){
            htmlLine.push("<div class='chord' id='chord_"+i+"_"+j+"'>"+curLine[j]+"</div>");
        }
        result += "Line "+i+": "+htmlLine.join(",")+"<BR>";
    }
    $("#lines").html(result);
}

function activeChord(lineIndex, chordIndex){
    var id = "#chord_"+lineIndex+"_"+chordIndex;
    if(prevChord == ""){
        prevChord = id;
        $(id).addClass(highlightClass);
    }

    if(prevChord != id){
        $(prevChord).removeClass(highlightClass);
        $(id).addClass(highlightClass);
        prevChord = id;
    }
}

function helpVisibility(num){
    if(num == 1){
        $("#help").show();
        $("#help_btn").text("Hide Help");
        $("#help_btn").val(0)
    }else{
        $("#help").hide();
        $("#help_btn").text("Show Help");
        $("#help_btn").val(1)
    }
}

function messageReceived(){
    $('.linkActive').stopTime('linkPending');
    $('.linkActive').removeClass('linkPending');
    $('.buttonActive').stopTime('linkPending');
    $('.buttonActive').removeClass('linkPending');
}

var lines = $.parseJSON($("#lines").text());
renderLines(lines);
</script>